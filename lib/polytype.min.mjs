// Polytype 0.1.0 â€“ https://github.com/fasttime/Polytype
function createConstructorProxy(e,t){const r=createSuperTypeSelector(e),o=createGetConstructorName(e),n=createSuperPrototypeSelector(t),s=createConstructorTarget(e),c=createProxy(s,e,constructorHandlerPrototype),a=_Object_create(null,{constructor:describeDataProperty(c,!0,!1,!0),class:describeDataProperty(n)}),i=createProxy(a,t,commonHandlerPrototype),p={class:describeDataProperty(r),name:{get:o},prototype:describeDataProperty(i)};return _Object_defineProperties(s,p),c}function createConstructorTarget(e){const t=function(...t){const r=createTypeToSuperArgsMap(e,t),o=new.target;for(const t of e){const e=r.get(t),n=getNewObjectPropertyDescriptors(t,e,o),s=_Reflect_ownKeys(n);for(const e of s)_Object_prototype_hasOwnProperty_call(this,e)&&delete n[e];_Object_defineProperties(this,n)}};return _Object_setPrototypeOf(t,null),t}function createSuperPrototypeSelector(e){return defineConfigurableDataProperty(class{static _(t){checkNonCallableArgument(t);const{prototype:r}=t;if(!e.has(r)){const e=isObject(r)?"Property 'prototype' of argument does not match any direct superclass":"Property 'prototype' of argument is not an object";throw _TypeError(e)}return createSuper(r,this)}}._,"name","class",!1)}function createSuperTypeSelector(e){return defineConfigurableDataProperty(class{static _(t){if(!e.has(t))throw checkNonCallableArgument(t),_TypeError("Argument is not a direct superclass");return createSuper(t,this)}}._,"name","class",!1)}function createTypeToSuperArgsMap(e,t){const r=new _Map;let o,n;const s=e=>{if(o===!e)throw _TypeError("Mixed argument styles");o=e};for(const o of t){if(isNonUndefinedPrimitive(o))throw _TypeError("Invalid arguments");let t,c;if(void 0!==o&&isObject(t=o.super)){if(s(!0),checkDuplicateSuperType(r,t),!e.has(t)){const e=`${nameOfType(t)} is not a direct superclass`;throw _TypeError(e)}if(c=o.arguments,isNonUndefinedPrimitive(c)){const e=`Invalid arguments for superclass ${nameOfType(t)}`;throw _TypeError(e)}}else s(!1),n||(n=e.values()),t=n.next().value,c=o;const a=void 0!==c?createListFromArrayLike(c):void 0;r.set(t,a)}return r}function installHasInstance(e){let t=!1;for(const r of e)r!==_Function_prototype&&isObject(r)&&(t=!0,installHasInstance(getPrototypesOf(r))||defineHasInstanceProperty(r));return t}function isInPrototypeTree(e,t){const r=getPrototypesOf(t);for(const t of r)if(t===e||isInPrototypeTree(e,t))return!0;return!1}const EMPTY_ARRAY=[],_Function_prototype=Function.prototype,_Map=Map,_Object=Object,{create:_Object_create,defineProperties:_Object_defineProperties,defineProperty:_Object_defineProperty,getOwnPropertyDescriptors:_Object_getOwnPropertyDescriptors,getPrototypeOf:_Object_getPrototypeOf,prototype:_Object_prototype,setPrototypeOf:_Object_setPrototypeOf}=_Object,_Proxy=Proxy,_Reflect=Reflect,{construct:_Reflect_construct,get:_Reflect_get,ownKeys:_Reflect_ownKeys,set:_Reflect_set}=_Reflect,_Set=Set,_String=String,_Symbol_hasInstance=Symbol.hasInstance,_TypeError=TypeError,bindCall=e=>_Function_prototype.call.bind(e),_Function_prototype_bind_call=bindCall(_Function_prototype.bind),_Function_prototype_hasInstance_call=bindCall(_Function_prototype[_Symbol_hasInstance]),_Object_prototype_hasOwnProperty_call=bindCall(_Object_prototype.hasOwnProperty),_Object_prototype_valueOf_call=bindCall(_Object_prototype.valueOf),checkDuplicateSuperType=(e,t)=>{if(e.has(t)){const e=`Duplicate superclass ${nameOfType(t)}`;throw _TypeError(e)}},checkNonCallableArgument=e=>{if(!isCallable(e))throw _TypeError("Argument is not a function")},classes=(...e)=>{if(!e.length)throw _TypeError("No superclasses specified");const t=new _Set,r=new _Set;for(const o of e){if(checkDuplicateSuperType(t,o),!isConstructor(o)){const e=`${nameOfType(o)} is not a constructor`;throw _TypeError(e)}const{prototype:e}=o;if(isNonNullPrimitive(e)){const e=`Property 'prototype' of ${nameOfType(o)} is not an object or null`;throw _TypeError(e)}t.add(o),null!==e&&r.add(e)}const o=createConstructorProxy(t,r);return installHasInstance(e),o},commonHandlerPrototype={setPrototypeOf:()=>!1},constructorHandlerPrototype={__proto__:commonHandlerPrototype,apply:()=>{throw _TypeError("Constructor cannot be invoked without 'new'")}},createGetConstructorName=e=>()=>`(${[...e].map(({name:e})=>_String(e))})`,createHandler=(e,t)=>({__proto__:t,get(t,r,o){const n=e.find(propFilter(r));if(void 0!==n)return _Reflect_get(n,r,o)},has:(t,r)=>e.some(propFilter(r)),set(t,r,o,n){const s=e.find(propFilter(r));return void 0!==s?_Reflect_set(s,r,o,n):(defineConfigurableDataProperty(n,r,o,!0,!0),!0)}}),createListFromArrayLike=_Function_prototype.apply.bind((...e)=>e,null),createProxy=(e,t,r)=>{const o=createHandler([e,...t],r),n=new _Proxy(e,o);return prototypeSetMap.set(n,t),n},createSuper=(e,t)=>{const r=e=>{const r=e();return _Object_setPrototypeOf(n,t),r},o=new _Proxy(t,{get:(o,n)=>r(()=>_Reflect_get(e,n,t)),set:(o,n,s)=>r(()=>_Reflect_set(e,n,s,t))}),n=_Object_create(o);return n},defineConfigurableDataProperty=(e,t,r,o=!0,n=!1)=>_Object_defineProperty(e,t,describeDataProperty(r,o,n,!0)),defineGlobally=()=>{const e="undefined"==typeof self?global:self;return!e.hasOwnProperty("classes")&&(defineConfigurableDataProperty(e,"classes",classes),defineConfigurableDataProperty(_Object,"getPrototypeListOf",getPrototypeListOf),!0)},defineHasInstanceProperty=e=>defineConfigurableDataProperty(e,_Symbol_hasInstance,hasInstance),describeDataProperty=(e,t,r,o)=>({value:e,writable:t,enumerable:r,configurable:o}),getNewObjectPropertyDescriptors=(e,t=EMPTY_ARRAY,r)=>_Object_getOwnPropertyDescriptors(_Reflect_construct(e,t,r)),{getPrototypeListOf:getPrototypeListOf}={getPrototypeListOf:e=>getPrototypesOf(e,!0)},getPrototypesOf=(e,t)=>{let r=prototypeSetMap.get(e);if(r)t&&(r=[...r]);else{const o=_Object_getPrototypeOf(e);r=null!==o?[o]:t?[]:EMPTY_ARRAY}return r},{[_Symbol_hasInstance]:hasInstance}=class{static[_Symbol_hasInstance](e){hasInstancePending=!0;try{if(isCallable(this)){const t=_Function_prototype_hasInstance_call(this,e);if(!hasInstancePending)return t;if(t||isObject(e)&&isInPrototypeTree(this.prototype,e))return!0}return!1}finally{hasInstancePending=!1}}};let hasInstancePending=!1;const isCallable=e=>"function"==typeof e,isConstructor=e=>{if(isCallable(e)){const t=_Function_prototype_bind_call(e);defineConfigurableDataProperty(t,"prototype",null);try{return!!class extends t{}}catch(e){}}return!1},isNonNullOrUndefinedPrimitive=e=>!objOrNullOrUndefinedTypes.includes(typeof e),isNonNullPrimitive=e=>void 0===e||isNonNullOrUndefinedPrimitive(e),isNonUndefinedPrimitive=e=>null===e||isNonNullOrUndefinedPrimitive(e),isObject=e=>null!==e&&!isNonNullPrimitive(e),{isPrototypeOf:isPrototypeOf}=class{static isPrototypeOf(e){return!(!isObject(e)||!isInPrototypeTree(_Object_prototype_valueOf_call(this),e))}},nameOfType=e=>{let t;return isCallable(e)&&(({name:t}=e),null!=t&&(t=_String(t)))?t:t=_String(e)},objOrNullOrUndefinedTypes=["function","object","undefined"],propFilter=e=>t=>e in t,prototypeSetMap=new WeakMap;defineConfigurableDataProperty(classes,"name","classes",!1),defineHasInstanceProperty(_Object),defineConfigurableDataProperty(_Object_prototype,"isPrototypeOf",isPrototypeOf);export{classes,defineGlobally,getPrototypeListOf};